{
	"name": "CLA core API",
	"meta": [],
	"sections": [
		{
			"title": "Overview",
			"content": [
				{
					"type": "P",
					"body": [ 
						"We developed the Common Livestock Application (CLA) API to allow livestock holders to submit, view, modify and confirm livestock movements electronically.\n",
						"The connection is secure and access to endpoints is restricted to registered users."
					]
				},
				{
					"type": "P",
					"body": "For more details about the livestock information systems api authentication and security, read the <a href='/documentation/authorisation' class='govuk-link'>authorisation</a> section."
				},
				{
					"type": "P",
					"body": "For more information about how to develop your own client applications, including example clients for this API, see our <a href='/documentation/tutorials' class='govuk-link'>tutorials</a>."
				}
			]
		},
		{
			"title": "Versioning",
			"content": [
				{
					"type": "P",
					"body": "When an API changes, we will make backwards compatible changes where we can. When this is not possible, we will add a note about deprecated endpoints and make a new endpoint available."
				},
				{
					"type": "P",
					"body": "The current live version of the Common Livestock Application API is 1.0."
				}
			]
		},
		{
			"title": "API browser and Open API file",
			"content": [
				{
					"type": "P",
					"body": "For more details about the Common Livestock Application API, open an API browser like <a href='https://editor.swagger.io' data-swagger-editor class='govuk-link' target='_blank'>Swagger Editor</a> and copy the Open API file content into it."
				},
				{
					"type": "P",
					"body":  "You can also generate a client library from the Open API file using Swagger Editor."
				}
			]
		},
		{
			"title": "HTTP status codes",
			"content": [
				{
					"type": "P",
					"body": "The Common Livestock Application API uses standard HTTP response code conventions:"
				},
				{
					"type": "UL",
					"body": [
						"1xx codes give information",
						"2xx codes mean success",
						"3xx codes mean a redirection",
						"4xx codes mean a client-side error",
						"5xx codes mean a server-side error"
					]
				},
				{
					"type": "P",
					"body": "Common status codes are:"
				},
				{
					"type": "UL",
					"body": [
						"200 - OK. The request has been successfuly proceessed to completion.",
						"201 - Created. The request was successfully received by the system and has been queued for later processing.",
						"400 - Bad Request. The incoming request body or parameters do not conform with the Open API document that describes the API",
						"403 - Forbidden. The request is formed correctly, but the REST API refuses to honour it. This is usually because the user does not have the necessary permissions for the resource", 
						"429 - Too Many Requests - you have made too many requests within a short time (see Request rate limit for further information).",
						"503 - Service Unavailable. The service is currently unable to handle the request due to a temporary overloading or maintenance activity.",
						"504 - Gateway Timeout - there is a network connection problem within the layers of the API fulfilment stack"
					]
				},
				{
					"type": "P",
					"body": [
						"We use HTTP status codes to signal overall success or failure of a request.",
						"Further detail describing the precise nature of the error is returned in the response body."
					]
				}
			]
		},
		{
			"title": "Request rate limit",
			"content": [
				{
					"type": "P",
					"body": "To protect the system against being overloaded with requests, we limit how the number of API requests you can make within a time period."
				},
				{
					"type": "P",
					"body": "Each minute, you can make up to 10 GET requests for each endpoint."
				},
				{
					"type": "P",
					"body": "If you exceed this limit, you will receive an HTTP 429 (Too Many Requests) status code for each request you make within the remainder of the time."
				}
			]
		},
		{
			"title": "Endpoints",
			"content": [
				{
					"type": "DETAIL",
					"body": {
						"title": "/v1/<strong>TransferRequests</strong>",
						"tag": "POST",
						"body": [
							{
								"type": "H4",
								"body": "Description"
							},
							{
								"type": "P",
								"body": "TransferRequests registers the movement of animals between two holdings: the source holding and the destination holding."
							},
							{
								"type": "P",
								"body": "Animals reported in a movement report can be identified individually or by batch.\n"
							},
							{
								"type": "P",
								"body": [
									"Transfers can be one of two types depending on the role of the user who is submitting the request:\n", 
									"* If the submitting user is associated with the source holding, the system treats the movement as an 'OFF' Movement.\n",
									"* If the submitting user is associated with the source holding, the system treats the movement as an 'ON' Movement.\n",
									"The userHolding must contain the same value as the sourceHolding when reporting an 'OFF' movement, and the same value as the destinationHolding when reporting an 'ON' movement.\n",
									"The movementDocument must be completed and have all mandatory fields populated for the movement to be valid.\n",
									"When reporting an 'OFF' movement, the departureDateTime must be specified and must be a date/time in the past.\n",
									"When reporting an 'ON' movement, both departureDateTime and arrivalDateTime must be specified. Both departureDateTime and arrivalDateTime must be in the past and arrivalDateTime must be later than departureDateTime. \n"
								]
							},
							{
								"type": "P",
								"body": [
									"For market users reporting an movement off a market holding:\n",
									"* saleDate and saleId must be specified.\n",
									"* movementGroups should be used to group the animals by lot/pen and vendor holding. Each movement group should have these details specified in fromSubLocation and vendorHolding respectively."				  
								]
							},
							{
								"type": "H4",
								"body": "Authorisation"
							},
							{
								"type": "P",
								"body": [
									"This endpoint is secured by LIS user authorization security.",
									"You will also need to Subscription key in a header.",
									"This key can be retrieved by Subscribing to the API."
								]
							},
							{
								"type": "H4",
								"body": "Request headers"
							},
							{
								"type": "TABLE",
								"body": {
									"headers": [
										"Name",
										"Description"
									],
									"rows": [
										{
											"data": [
												[ "Ocp-Apim-Subscription-Key", "Livestock Information Service API subscription key"],
												[ "x-correlation-id","a unique identifer for this request (we recommend generating a GUID for this)."]
											]
										}
									]
								}
							},
							{
								"type": "H4",
								"body": "Parameters"
							},
							{
								"type": "P",
								"body": "None"
							},
							{
								"type": "H4",
								"body": "Response"
							},
							{
								"type": "P",
								"body": [
									"HTTP status: <code class='code--slim'>201 (Created)</code>\n",
									"This response indicates that the data content has passed an initial syntax check, and has been successfully queued by the system for further processing.", 
									"The requestId field in the response contains a unique identifier generated by the system that the caller then uses to track the progress of the movement request as it is validated by the system."
								]
							},
							{
								"type": "P",
								"body": [
									"HTTP status: <code class='code--slim'>400 (Bad Request)</code>\n", 
									"This response indicates that the submission has been rejected by the system as some, or all of the data supplied was found to be in error.","The CLAErrorResponse structure in the returned message provides a list of error codes, together with a textual description of each error.", "Additional information is provided in the the errors and identifies the field or fields in the original submission that that generated each error.", 
									"Following an error response, the system discards the submitted data.",
									"The caller must correct the errors identified and resubmit the movement again.", 
									"If the caller supplied a value in the trackingId field of the submitted movement, this can be reused in a future submission as the system maintains no record of it."
								]
							},
							{
								"type": "CODE",
								"body": [
									"{\r\n  \"error\": {\r\n    \"code\": \"string\",\r\n    \"message\": \"string\",\r\n    \"target\": \"string\",\r\n    \"details\": [\r\n      {\r\n        \"code\": \"string\",\r\n        \"target\": \"string\",\r\n        \"message\": \"string\"\r\n      }\r\n    ]\r\n  }\r\n}"
								]
							}
						]
					}
				}
			]
		}
	]
}
