{
  "openapi": "3.0.3",
  "info": {
    "title": "3rd Party LIS API",
    "description": "The **Beta version** of this API is a pre-release version made available for external testing and feedback. It may contain new features and functionality that are still under development. While the API is largely functional, it is not guaranteed to be fully stable, and breaking changes may occur as we refine the product based on user feedback.\n\nWe encourage developers to use the Beta version for testing purposes but advise caution when integrating it into production systems. Feedback from users during the Beta phase will help improve the API before the final, stable release.",
    "version": "1.0.0-beta.1"
  },
  "servers": [
    {
      "url": "https://**baseurl**/v1",
      "description": "api url details shared upon api access approval"
    }
  ],
  "security": [
    {
      "ApiSubscriptionKey": [],
      "ApiAccessToken": []
    }
  ],
  "paths": {
    "/movements": {
      "post": {
        "tags": [
          "movements"
        ],
        "summary": "Submit a new animal movement",
        "description": "The endpoint allows the registration of an animal movement (on or off). The following request modes are allowed  \n\nRequest Mode\n- sync - Request will be actioned in a synchronous mode\n- async - Request will be actioned in an asynchronous mode\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/xCorrelationId"
          },
          {
            "$ref": "#/components/parameters/xRequestMode"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "movementData": {
                    "$ref": "#/components/schemas/movement"
                  },
                  "document": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "movementData": {
                  "contentType": "application/json"
                },
                "document": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "description": "OK - Successful operation with identifier in response body.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MovementResponse1"
                    },
                    {
                      "$ref": "#/components/schemas/MovementResponse2"
                    }
                  ]
                }
              }
            }
          },
          "202": {
            "description": "OK - Successful operation, async request has been accepted. Response headers contain request-id and retry-after to check the request status afterwards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncAcceptedResponse"
                }
              }
            },
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "503": {
            "description": "The service is currently unavailable.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Retrieve the list of movements",
        "description": "The endpoint permits to obtain a list of movements defined in the system.\nQuerystring parametrization allows the list to be filtered, sorted, and paginated.",
        "operationId": "getMovements",
        "parameters": [
          {
            "name": "movementType",
            "in": "query",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sending",
                  "receiving"
                ]
              }
            },
            "style": "form"
          },
          {
            "name": "siteIdentifier",
            "in": "query",
            "allowEmptyValue": false,
            "required": false,
            "schema": {
              "type": "string",
              "format": "string"
            },
            "description": "The end-point returns movements where departure/arrival is this site.",
            "example": "28/822/2977"
          },
          {
            "name": "movementStatus",
            "in": "query",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/movementState"
              }
            },
            "style": "form"
          },
          {
            "name": "species",
            "in": "query",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/species"
              }
            },
            "style": "form"
          },
          {
            "name": "minDepartureDate",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/datetime"
            }
          },
          {
            "name": "maxDepartureDate",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/datetime"
            }
          },
          {
            "$ref": "#/components/parameters/xPage"
          },
          {
            "$ref": "#/components/parameters/xPageSize"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "movementNumber",
                "departureDate",
                "state"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/xSort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movements"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request. Please verify the parameters/values and submit the request again.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "503": {
            "description": "The service is currently unavailable.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          }
        }
      }
    },
    "/movements/{movementNumber}": {
      "get": {
        "tags": [
          "movements"
        ],
        "summary": "Retrieve a specific movement",
        "description": "Retrieve information about a specific movement using its number.",
        "operationId": "getMovementById",
        "parameters": [
          {
            "name": "movementNumber",
            "in": "path",
            "description": "movement number of the movement to retrieve",
            "required": true,
            "schema": {
              "type": "number",
              "example": 55663427
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/movement"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "forbidden": {
                    "$ref": "#/components/examples/forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The specified movement number was not found.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "503": {
            "description": "The service is currently unavailable.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "movements"
        ],
        "summary": "Update a movement",
        "description": "Update information about a specific movement using its number.  \n\n Request Mode\n - async - Request will be actioned in a synchronous mode\n - sync - Request will be actioned in an asynchronous mode\n",
        "operationId": "updateMovement",
        "parameters": [
          {
            "$ref": "#/components/parameters/xCorrelationId"
          },
          {
            "$ref": "#/components/parameters/xRequestMode"
          },
          {
            "name": "movementNumber",
            "in": "path",
            "description": "movement number of the movement to update",
            "required": true,
            "schema": {
              "type": "number",
              "example": 55663427
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "movementData": {
                    "$ref": "#/components/schemas/movement"
                  },
                  "document": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "movementData": {
                  "contentType": "application/json"
                },
                "documents": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful operation - We are processing your request.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MovementResponse1"
                    },
                    {
                      "$ref": "#/components/schemas/MovementResponse2"
                    }
                  ]
                }
              }
            }
          },
          "202": {
            "description": "OK - Successful operation, async request has been accepted. Response headers contain request-id and retry-after to check the request status afterwards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncAcceptedResponse"
                }
              }
            },
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The specified movement number was not found.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "503": {
            "description": "The service is currently unavailable.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "movements"
        ],
        "summary": "Delete (Cancel) a movement by number",
        "description": "Delete will cancel a specific movement by its unique number.",
        "parameters": [
          {
            "$ref": "#/components/parameters/xCorrelationId"
          },
          {
            "$ref": "#/components/parameters/xRequestMode"
          },
          {
            "name": "movementNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number",
              "example": 55663427
            },
            "description": "The movement number of the movement to cancel."
          }
        ],
        "responses": {
          "202": {
            "description": "OK - Successful operation, async request has been accepted. Response headers contain request-id and retry-after to check the request status afterwards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncAcceptedResponse"
                }
              }
            },
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          },
          "204": {
            "description": "No Content. The movement was successfully cancelled.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "404": {
            "description": "Not Found. The specified movement number was not found.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "503": {
            "description": "The service is currently unavailable.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          }
        }
      }
    },
    "/movements/{movementNumber}/documents/{documentId}": {
      "put": {
        "tags": [
          "movements"
        ],
        "summary": "Update a document for a specific movement",
        "operationId": "updateMovementDocument",
        "parameters": [
          {
            "name": "movementNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number",
              "example": 55663427
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "description": "The document to upload (PDF and PNG are allowed)"
        },
        "responses": {
          "200": {
            "description": "Document successfully uploaded",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Document uploaded successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or file type",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "403": {
            "description": "Forbidden. Insufficent access to perform the operation.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "404": {
            "description": "Not Found. The specified movement number was not found.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request."
          },
          "503": {
            "description": "The service is currently unavailable.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          }
        }
      }
    },
    "/movements/{movementNumber}/confirmations": {
      "post": {
        "tags": [
          "movements"
        ],
        "summary": "Confirm a movement",
        "description": "Confirm or reject a movement by posting an action with a reason where applicable.",
        "operationId": "confirmMovement",
        "parameters": [
          {
            "$ref": "#/components/parameters/xCorrelationId"
          },
          {
            "$ref": "#/components/parameters/xRequestMode"
          },
          {
            "name": "movementNumber",
            "in": "path",
            "description": "movement number of the movement to confirm",
            "required": true,
            "schema": {
              "type": "number",
              "example": 55663427
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Confirmation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successfull",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Confirmation"
                }
              }
            }
          },
          "202": {
            "description": "OK - Successful operation, async request has been accepted. Response headers contain request-id and retry-after to check the request status afterwards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncAcceptedResponse"
                }
              }
            },
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Insufficent access to perform the operation.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "404": {
            "description": "Not Found. The specified movement number was not found.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request."
          },
          "503": {
            "description": "The service is currently unavailable.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          }
        }
      }
    },
    "/hauliers": {
      "get": {
        "tags": [
          "hauliers"
        ],
        "summary": "Retrieve a list of hauliers.",
        "description": "The endpoint allows searching and retrieving a list of hauliers.",
        "operationId": "getHauliers",
        "parameters": [
          {
            "name": "species",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/species"
              }
            },
            "allowEmptyValue": false,
            "required": false
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "allowEmptyValue": false
          },
          {
            "$ref": "#/components/parameters/xPage"
          },
          {
            "$ref": "#/components/parameters/xPageSize"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "partyNumber",
                "name"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/xSort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful operation",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HaulierList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request. Please verify the parameters/values and submit the request again.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "503": {
            "description": "The service is currently unavailable.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          }
        }
      }
    },
    "/rejectionreasons": {
      "get": {
        "tags": [
          "movement reference"
        ],
        "summary": "Retrieve a list of movement rejection reasons",
        "description": "This endpoint can be used to retrieve movement rejection reasons",
        "operationId": "getMovementRejectionReasons",
        "parameters": [
          {
            "name": "species",
            "in": "query",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "$ref": "#/components/schemas/species"
            },
            "style": "form"
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RejectionReasonList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request. Please verify the parameters/values and submit the request again.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "503": {
            "description": "The service is currently unavailable.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          }
        }
      }
    },
    "/animals": {
      "post": {
        "tags": [
          "animals"
        ],
        "summary": "Create a new animal",
        "description": "The endpoint allows the registration of an animal.",
        "operationId": "createAnimal",
        "parameters": [
          {
            "$ref": "#/components/parameters/xCorrelationId"
          },
          {
            "$ref": "#/components/parameters/xRequestMode"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Animal",
                "description": "Animal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful operation.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnimalResponse"
                }
              }
            }
          },
          "202": {
            "description": "OK - Successful operation. The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncAcceptedResponse"
                }
              }
            },
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "validation-error": {
                    "$ref": "#/components/examples/validation-error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "animals"
        ],
        "summary": "Get animals",
        "description": "The endpoint returns animals summary list.",
        "operationId": "getAnimals",
        "parameters": [
          {
            "name": "species",
            "in": "query",
            "allowEmptyValue": false,
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/species"
            },
            "description": "The end-point returns animals of this species."
          },
          {
            "name": "siteIdentifier",
            "in": "query",
            "allowEmptyValue": false,
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            },
            "description": "The end-point returns animals for this site.",
            "example": "28/822/2977"
          },
          {
            "$ref": "#/components/parameters/xPage"
          },
          {
            "$ref": "#/components/parameters/xPageSize"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "animalIdentifier",
                "state"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/xSort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful operation",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "values": {
                      "items": {
                        "$ref": "#/components/schemas/AnimalSummary"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "forbidden": {
                    "$ref": "#/components/examples/forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "not-found": {
                    "$ref": "#/components/examples/not-found"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/animals/{identifier}": {
      "get": {
        "tags": [
          "animals"
        ],
        "summary": "Get an animal",
        "description": "Get information about a specific animal using its identifier.",
        "operationId": "getAnimal",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "UK123456654321"
            },
            "description": "The identifier of the animal to get."
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful operation",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Animal"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "forbidden": {
                    "$ref": "#/components/examples/forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "not-found": {
                    "$ref": "#/components/examples/not-found"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "animals"
        ],
        "summary": "Update an animal",
        "description": "Update information about a specific animal using its identifier.",
        "operationId": "updateAnimalPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/xCorrelationId"
          },
          {
            "$ref": "#/components/parameters/xRequestMode"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "UK654326123455"
            },
            "description": "The identifier of the animal to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Animal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful operation.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnimalResponse"
                }
              }
            }
          },
          "202": {
            "description": "OK - Successful operation. The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncAcceptedResponse"
                }
              }
            },
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "validation-error": {
                    "$ref": "#/components/examples/validation-error"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "forbidden": {
                    "$ref": "#/components/examples/forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "not-found": {
                    "$ref": "#/components/examples/not-found"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "animals"
        ],
        "summary": "Delete an animal by identifer",
        "description": "Delete will delete the occurrence of a specific animal by its unique identifier but only if there are no other associated events recorded against the animal.",
        "operationId": "deleteAnimal",
        "parameters": [
          {
            "$ref": "#/components/parameters/xCorrelationId"
          },
          {
            "$ref": "#/components/parameters/xRequestMode"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "UK654326123455"
            },
            "description": "The identifier of the animal to delete."
          }
        ],
        "responses": {
          "202": {
            "description": "OK - Successful operation. The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncAcceptedResponse"
                }
              }
            },
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          },
          "204": {
            "description": "No Content. The request has succeeded.",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "validation-error": {
                    "$ref": "#/components/examples/validation-error"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "forbidden": {
                    "$ref": "#/components/examples/forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "not-found": {
                    "$ref": "#/components/examples/not-found"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lostfounds": {
      "get": {
        "tags": [
          "animal lostfounds"
        ],
        "summary": "Get animal lost/found records.",
        "description": "Get animal lost/found records for a site.",
        "operationId": "getLostFounds",
        "parameters": [
          {
            "name": "siteIdentifier",
            "in": "query",
            "allowEmptyValue": false,
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            },
            "description": "If populated the end-point will return animals for this site.",
            "example": "28/822/2977"
          },
          {
            "name": "identifer",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "identifer of the Animal"
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "lost",
                  "stolen",
                  "found"
                ]
              }
            }
          },
          {
            "name": "minEventDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "maxEventDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "minReportDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "maxReportDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "$ref": "#/components/parameters/xPage"
          },
          {
            "$ref": "#/components/parameters/xPageSize"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "animalIdentifier",
                "state"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/xSort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful operation",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LostFound"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "invalid-request-schema": {
                    "$ref": "#/components/examples/invalid-request-schema"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "animal lostfounds"
        ],
        "summary": "Record an animal lost/found.",
        "description": "Use this endpoint to report an animal as lost/found on a site.",
        "operationId": "createLostFound",
        "parameters": [
          {
            "$ref": "#/components/parameters/xCorrelationId"
          },
          {
            "$ref": "#/components/parameters/xRequestMode"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LostFound"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful operation",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LostFound"
                }
              }
            }
          },
          "202": {
            "description": "OK - Successful operation. The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncAcceptedResponse"
                }
              }
            },
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "validation-error": {
                    "$ref": "#/components/examples/validation-error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lostfounds/{id}": {
      "put": {
        "tags": [
          "animal lostfounds"
        ],
        "summary": "Edit an animal lost/found record.",
        "description": "Use this endpoint to edit an animal as lost/found on a site.",
        "operationId": "amendLostFound",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/uuid"
                },
                {
                  "example": "df44b048-aa6a-4b2f-8ae7-daad7d3f6dc4"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LostFound"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Successful operation",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LostFound"
                }
              }
            }
          },
          "202": {
            "description": "OK - Successful operation. The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncAcceptedResponse"
                }
              }
            },
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "validation-error": {
                    "$ref": "#/components/examples/validation-error"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "forbidden": {
                    "$ref": "#/components/examples/forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "not-found": {
                    "$ref": "#/components/examples/not-found"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deathreasons": {
      "get": {
        "tags": [
          "animal reference"
        ],
        "summary": "Retrieve a list of animal death reasons by species",
        "description": "This endpoint can be used to retrieve animal death reasons by species.",
        "operationId": "getAnimalDeathReasons",
        "parameters": [
          {
            "name": "species",
            "in": "query",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "$ref": "#/components/schemas/species"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful operation",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeathReasonList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "invalid-request": {
                    "$ref": "#/components/examples/invalid-request-schema"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/breeds": {
      "get": {
        "tags": [
          "animal reference"
        ],
        "summary": "Retrieve a list of animal breeds by species",
        "description": "This endpoint can be used to retrieve animal breeds by species.",
        "operationId": "getAnimalBreeds",
        "parameters": [
          {
            "name": "species",
            "in": "query",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "$ref": "#/components/schemas/species"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful operation",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BreedList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "invalid-request": {
                    "$ref": "#/components/examples/invalid-request-schema"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/genotypes": {
      "get": {
        "tags": [
          "animal reference"
        ],
        "summary": "Retrieve a list of animal genotypes by species",
        "description": "This endpoint can be used to retrieve animal genotypes by species.",
        "operationId": "getAnimalGenotypes",
        "parameters": [
          {
            "name": "species",
            "in": "query",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "$ref": "#/components/schemas/species"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful operation",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenotypeList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "invalid-request": {
                    "$ref": "#/components/examples/invalid-request-schema"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/requeststatus/{requestId}": {
      "get": {
        "tags": [
          "requeststatus"
        ],
        "summary": "Get async http request status",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "allowEmptyValue": false,
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/uuid"
                },
                {
                  "example": "b0df91f3-918e-4cb1-908f-cb489f1e9c63"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Successful",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "not-found": {
                    "$ref": "#/components/examples/not-found"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/server-error"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "headers": {
              "LI-Request-Id": {
                "$ref": "#/components/headers/xRequestId"
              },
              "LI-Correlation-Id": {
                "$ref": "#/components/headers/xCorrelationId"
              },
              "Retry-After": {
                "$ref": "#/components/headers/xRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "server-error": {
                    "$ref": "#/components/examples/service-unavailable"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiSubscriptionKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Ocp-Apim-Subscription-Key",
        "description": "Your API key. Pass it in the `Ocp-Apim-Subscription-Key` header. This is used to identify your application."
      },
      "ApiAccessToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Use your JWT access token to authorize requests. Pass it in the `Authorization` header. The token is acquired via user authorization flow"
      }
    },
    "schemas": {
      "movementState": {
        "type": "string",
        "enum": [
          "blocked",
          "cancelled",
          "confirmed",
          "inDispute",
          "rejected",
          "reported",
          "warnings",
          "matched",
          "inferred"
        ]
      },
      "species": {
        "type": "string",
        "enum": [
          "bison",
          "buffalo",
          "cattle",
          "deer",
          "goats",
          "sheep"
        ]
      },
      "datetime": {
        "type": "string",
        "format": "date-time",
        "description": "A date and time, in the RFC 3339 format (aka ISO8601)."
      },
      "batches": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "species": {
              "$ref": "#/components/schemas/species"
            },
            "animals": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "animalIdentifier": {
                        "type": "string",
                        "example": "UK12345678910"
                      }
                    },
                    "required": [
                      "animalIdentifier"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "mark": {
                        "type": "string",
                        "example": "556743"
                      },
                      "quantity": {
                        "type": "integer",
                        "example": 1
                      }
                    },
                    "required": [
                      "quantity"
                    ],
                    "additionalProperties": false
                  }
                ]
              }
            }
          },
          "required": [
            "species"
          ],
          "additionalProperties": false
        }
      },
      "date": {
        "type": "string",
        "format": "date",
        "description": "A date without a time component, in the RFC 3339 format (aka ISO8601)."
      },
      "time": {
        "type": "string",
        "format": "time",
        "example": "23:30Z",
        "description": "A time (no date component), in the RFC 3339 format (aka ISO8601)."
      },
      "siteType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "readOnly": true,
        "required": [
          "type",
          "description"
        ]
      },
      "site": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/siteType"
              },
              {
                "description": "This refers to the type of site activity, such as Market, Abattoir, etc."
              }
            ]
          },
          "identifiers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "identifier": {
                  "type": "string",
                  "example": "27/811/2976"
                },
                "type": {
                  "type": "string",
                  "description": "This refers to the type of site identifier, such as holdingNumber, fsaNumber, etc.",
                  "example": "holdingNumber",
                  "readOnly": true
                }
              },
              "required": [
                "identifier",
                "type"
              ],
              "additionalProperties": false
            }
          },
          "name": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "readOnly": true
              }
            ]
          }
        },
        "required": [
          "type",
          "identifiers"
        ]
      },
      "timestampedSite": {
        "type": "object",
        "properties": {
          "date": {
            "$ref": "#/components/schemas/date"
          },
          "time": {
            "$ref": "#/components/schemas/time"
          },
          "site": {
            "$ref": "#/components/schemas/site"
          }
        },
        "required": [
          "site"
        ],
        "additionalProperties": false
      },
      "movementReviewState": {
        "type": "string",
        "enum": [
          "forReview",
          "inReview",
          "finalReview",
          "reviewed",
          "notApplicable"
        ]
      },
      "Movements": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "movementNumber": {
                  "type": "number",
                  "example": 55663427
                },
                "batches": {
                  "$ref": "#/components/schemas/batches"
                },
                "departure": {
                  "$ref": "#/components/schemas/timestampedSite"
                },
                "arrival": {
                  "$ref": "#/components/schemas/timestampedSite"
                },
                "state": {
                  "$ref": "#/components/schemas/movementState"
                },
                "reviewState": {
                  "$ref": "#/components/schemas/movementReviewState"
                }
              }
            }
          }
        }
      },
      "uuid": {
        "type": "string",
        "format": "uuid",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "description": "A Universally Unique Identifier"
      },
      "departureSiteType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "activity": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "slaughterMarket"
              }
            }
          }
        },
        "required": [
          "type",
          "description"
        ]
      },
      "departureSite": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/departureSiteType"
              },
              {
                "description": "This refers to the type of site activity, such as Market, Abattoir, etc."
              }
            ]
          },
          "identifiers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "identifier": {
                  "type": "string",
                  "example": "27/811/2976"
                },
                "type": {
                  "type": "string",
                  "description": "This refers to the type of site identifier, such as holdingNumber, fsaNumber, etc.",
                  "example": "holdingNumber",
                  "readOnly": true
                }
              },
              "required": [
                "identifier",
                "type"
              ],
              "additionalProperties": false
            }
          },
          "name": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "readOnly": true
              }
            ]
          }
        },
        "required": [
          "type",
          "identifiers"
        ]
      },
      "departureTimestampedSite": {
        "type": "object",
        "properties": {
          "date": {
            "$ref": "#/components/schemas/date"
          },
          "time": {
            "$ref": "#/components/schemas/time"
          },
          "site": {
            "$ref": "#/components/schemas/departureSite"
          }
        },
        "required": [
          "site"
        ],
        "additionalProperties": false
      },
      "movementReport": {
        "type": "object",
        "properties": {
          "departure": {
            "$ref": "#/components/schemas/departureTimestampedSite"
          },
          "arrival": {
            "$ref": "#/components/schemas/timestampedSite"
          },
          "movementNumber": {
            "type": "integer",
            "example": 55663427,
            "readOnly": true
          },
          "receivedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/date"
              },
              {
                "readOnly": true
              }
            ]
          },
          "potentialMatchMovementNumbers": {
            "allOf": [
              {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "readOnly": true,
                "example": [
                  55663450,
                  55663451,
                  55663452
                ]
              }
            ]
          },
          "batches": {
            "$ref": "#/components/schemas/batches"
          },
          "return": {
            "type": "object",
            "properties": {
              "date": {
                "$ref": "#/components/schemas/date"
              },
              "time": {
                "$ref": "#/components/schemas/time"
              },
              "movementNumber": {
                "type": "integer",
                "example": 55663427,
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "departure",
          "arrival",
          "batches",
          "movementNumber"
        ]
      },
      "internationalAddress": {
        "type": "object",
        "properties": {
          "singleLineAddress": {
            "type": "string",
            "example": "Grawertstrasse 16, 48146 Munster, Germany"
          },
          "region": {
            "type": "string",
            "example": "North Rhine-Westphalia"
          },
          "countryCode": {
            "title": "ISO 3166-1 Alpha-2 Country code",
            "description": "A valid 2-digit ISO country code (ISO 3166-1 alpha-2), or, an array of valid ISO codes.",
            "type": "string",
            "pattern": "^[A-Z]{2}$",
            "example": "DE"
          }
        },
        "required": [
          "region",
          "countryCode"
        ]
      },
      "movement": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/movementReport"
          }
        ],
        "properties": {
          "matchedMovementNumbers": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "example": [
              55663427,
              55663428
            ]
          },
          "movementKind": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "regular",
              "circular",
              "export",
              "import"
            ]
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/movementState"
              },
              {
                "readOnly": true
              }
            ]
          },
          "reviewState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/movementReviewState"
              },
              {
                "readOnly": true
              }
            ]
          },
          "confirmations": {
            "allOf": [
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "reportingSite": {
                      "type": "string",
                      "enum": [
                        "departure",
                        "arrival",
                        "both"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "enum": [
                        "confirmOff",
                        "accept",
                        "reject"
                      ]
                    },
                    "number": {
                      "type": "integer",
                      "example": 10321
                    },
                    "reason": {
                      "type": "string",
                      "example": "Possible TB Hazard"
                    },
                    "otherReason": {
                      "type": "string",
                      "example": "Other"
                    },
                    "createdDateTime": {
                      "$ref": "#/components/schemas/datetime"
                    }
                  },
                  "required": [
                    "action"
                  ],
                  "additionalProperties": false
                }
              },
              {
                "readOnly": true
              }
            ]
          },
          "movementReports": {
            "allOf": [
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/movementReport"
                    }
                  ],
                  "properties": {
                    "reportingSite": {
                      "type": "string",
                      "enum": [
                        "departure",
                        "arrival",
                        "both"
                      ]
                    },
                    "createdDateTime": {
                      "$ref": "#/components/schemas/datetime"
                    },
                    "updatedDateTime": {
                      "$ref": "#/components/schemas/datetime"
                    }
                  }
                }
              },
              {
                "readOnly": true
              }
            ]
          },
          "haulier": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "departure",
                  "arrival",
                  "haulier"
                ]
              },
              "authorisationNumber": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "trailerNumber": {
                "type": "string",
                "example": "TRL 0125/3"
              },
              "vehicleRegistrationNumber": {
                "type": "string",
                "example": "YM24 DLY"
              }
            }
          },
          "exportInformation": {
            "$ref": "#/components/schemas/internationalAddress"
          },
          "importInformation": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/internationalAddress"
              }
            ],
            "properties": {
              "importDelisrationFlag": {
                "type": "boolean"
              },
              "healthCertificateNumber": {
                "type": "string",
                "example": "186GBBP"
              },
              "ipaffsReferenceNumber": {
                "type": "string",
                "example": "CHEDA.GB.2024.1234567"
              }
            },
            "required": [
              "importDelisrationFlag",
              "ipaffsReferenceNumber",
              "region",
              "countryCode"
            ]
          },
          "fciInformation": {
            "type": "object",
            "properties": {
              "delisrationFlag": {
                "type": "boolean"
              },
              "diseaseDetails": {
                "type": "string",
                "example": "BVD"
              },
              "treatmentDetails": {
                "type": "string",
                "example": "BVDV Vaccine X"
              },
              "analysisSamples": {
                "type": "string",
                "example": "Fecal samples show no sign of parasites"
              }
            },
            "required": [
              "delisrationFlag"
            ]
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "importHealthCertificate",
                    "circularMovementPermit"
                  ]
                },
                "id": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/uuid"
                    },
                    {
                      "readOnly": true
                    }
                  ]
                }
              }
            }
          },
          "createdDateTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/datetime"
              },
              {
                "readOnly": true
              }
            ]
          },
          "updatedDateTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/datetime"
              },
              {
                "readOnly": true
              }
            ]
          }
        },
        "required": [
          "movementReports",
          "movementNumber",
          "reviewState",
          "state",
          "movementKind",
          "createdDateTime",
          "updatedDateTime"
        ]
      },
      "MovementResponse1": {
        "type": "object",
        "properties": {
          "movementNumber": {
            "type": "number",
            "readOnly": true,
            "example": 55663427
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "format": "uri",
                "readOnly": true,
                "example": "/movements/55663427"
              }
            }
          }
        }
      },
      "BasicMessage": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Warning": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicMessage"
          }
        ],
        "example": {
          "items": [
            {
              "code": 1,
              "message": "Warning 1"
            },
            {
              "code": 2,
              "message": "Warning 2"
            },
            {
              "code": 3,
              "message": "Warning 3"
            },
            {
              "code": 4,
              "message": "Warning 4"
            }
          ]
        }
      },
      "MovementResponse2": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "movementNumber": {
                "type": "number",
                "readOnly": true,
                "example": 55663427
              },
              "warning": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Warning"
                  }
                ]
              },
              "links": {
                "type": "object",
                "properties": {
                  "self": {
                    "type": "string",
                    "format": "uri",
                    "readOnly": true,
                    "example": "/movements/55663427"
                  }
                }
              }
            }
          }
        ]
      },
      "AsyncAcceptedResponse": {
        "type": "object",
        "required": [
          "requestStatusUrl"
        ],
        "properties": {
          "requestStatusUrl": {
            "type": "string",
            "format": "uri",
            "example": "/requeststatus/df44b048-aa6a-4b2f-8ae7-daad7d3f6dc4"
          }
        }
      },
      "Error": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicMessage"
          }
        ],
        "example": {
          "items": [
            {
              "code": 1,
              "message": "Error 1"
            },
            {
              "code": 2,
              "message": "Error 2"
            },
            {
              "code": 3,
              "message": "Error 3"
            },
            {
              "code": 4,
              "message": "Error 4"
            }
          ]
        }
      },
      "ErrorDetail": {
        "type": "object",
        "description": "An object to provide explicit details on a problem towards an API consumer.",
        "properties": {
          "detail": {
            "type": "string",
            "description": "A granular description on the specific error related to a body property, query parameter, path parameters, and/or header.",
            "maxLength": 4096
          },
          "source": {
            "type": "string",
            "description": "The source of the error, e.g. the name of a header, query or path parameter, or a JSON pointer to a specific request body property.",
            "maxLength": 1024
          },
          "values": {
            "type": "string",
            "description": "The value that has caused the error, e.g. the value passed in as a header, query or path parameter, or a request body property that lead to the error."
          },
          "code": {
            "type": "string",
            "description": "A string containing additional provider specific codes to identify the error context.",
            "maxLength": 50
          }
        },
        "required": [
          "detail"
        ]
      },
      "Errors": {
        "type": "array",
        "description": "An array of error details to accompany a problem details response.",
        "minItems": 1,
        "maxItems": 1000,
        "items": {
          "$ref": "#/components/schemas/ErrorDetail"
        }
      },
      "ReportAuthor": {
        "type": "object",
        "properties": {
          "reportingSite": {
            "type": "string",
            "enum": [
              "departure",
              "arrival",
              "both"
            ],
            "example": "departure"
          }
        }
      },
      "Confirmation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportAuthor"
          },
          {
            "type": "object",
            "properties": {
              "number": {
                "type": "number",
                "readOnly": true,
                "example": 55663427
              },
              "action": {
                "type": "string",
                "enum": [
                  "confirmOff",
                  "accept",
                  "reject"
                ],
                "example": "reject"
              },
              "reason": {
                "type": "string",
                "nullable": false,
                "example": "Other"
              },
              "otherReason": {
                "type": "string",
                "nullable": true,
                "example": "Possible TB Hazard"
              },
              "createdDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/datetime"
                  },
                  {
                    "readOnly": true
                  }
                ]
              }
            }
          }
        ],
        "required": [
          "action"
        ]
      },
      "haulierState": {
        "description": "The state of a person or organisation.",
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "unknown"
        ]
      },
      "postcode": {
        "type": "string",
        "pattern": "^[A-Z]{1,2}[0-9][0-9A-Z]? ?[0-9][A-Z]{2}$"
      },
      "correspondenceAddress": {
        "type": "object",
        "description": "The contact address of a person or organisation.",
        "properties": {
          "singleLineAddress": {
            "type": "string",
            "example": "The Livery Yard, Hunshelf Bank, Stocksbridge"
          },
          "postcode": {
            "$ref": "#/components/schemas/postcode"
          }
        }
      },
      "haulier": {
        "type": "object",
        "properties": {
          "authorisationNumber": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "species": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/species"
            }
          },
          "state": {
            "$ref": "#/components/schemas/haulierState"
          },
          "mobile": {
            "type": "string"
          },
          "landline": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "correspondenceAddress": {
            "$ref": "#/components/schemas/correspondenceAddress"
          }
        }
      },
      "HaulierList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 1
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/haulier"
            }
          }
        }
      },
      "RejectionReasonList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "rejectionReasonIdentifier": {
                  "type": "string",
                  "format": "string",
                  "example": "12345"
                },
                "rejectionReason": {
                  "type": "string",
                  "example": "Movement didn't happen"
                }
              }
            }
          }
        }
      },
      "sex": {
        "type": "string",
        "enum": [
          "female",
          "male"
        ]
      },
      "animal": {
        "type": "object",
        "description": "A record of attributes identifying an animal",
        "properties": {
          "identifier": {
            "type": "string",
            "example": "UK12345678910"
          },
          "species": {
            "$ref": "#/components/schemas/species"
          },
          "name": {
            "type": "string",
            "example": "Ian"
          },
          "sex": {
            "$ref": "#/components/schemas/sex"
          }
        },
        "required": [
          "identifier"
        ]
      },
      "animalState": {
        "type": "string",
        "enum": [
          "registered",
          "dead",
          "lost",
          "stolen"
        ]
      },
      "breed": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Dexter Cross",
            "readOnly": true
          },
          "code": {
            "type": "string",
            "example": "DEX"
          },
          "crossBreed": {
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "AnimalSummary": {
        "type": "object",
        "properties": {
          "animal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/animal"
              },
              {
                "type": "object"
              }
            ],
            "properties": {
              "state": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/animalState"
                  },
                  {
                    "readOnly": true
                  }
                ]
              }
            },
            "required": [
              "species",
              "sex"
            ]
          },
          "breed": {
            "$ref": "#/components/schemas/breed"
          }
        }
      },
      "productionType": {
        "type": "string",
        "enum": [
          "meat",
          "dairy",
          "beef"
        ]
      },
      "ParentAnimal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/animal"
          },
          {
            "type": "object"
          },
          {
            "properties": {
              "species": {
                "readOnly": true
              },
              "name": {
                "readOnly": true
              },
              "sex": {
                "readOnly": true
              }
            }
          }
        ]
      },
      "animalBirth": {
        "type": "object",
        "properties": {
          "site": {
            "$ref": "#/components/schemas/site"
          },
          "date": {
            "$ref": "#/components/schemas/date"
          },
          "year": {
            "type": "integer"
          },
          "mark": {
            "type": "string",
            "example": "556773"
          },
          "assistedBirthFlag": {
            "type": "boolean"
          },
          "multipleBirthsFlag": {
            "type": "boolean"
          }
        },
        "required": [
          "site",
          "year",
          "assistedBirthFlag",
          "multipleBirthsFlag"
        ],
        "additionalProperties": false
      },
      "animalDeath": {
        "type": "object",
        "properties": {
          "carcassCollectionSite": {
            "$ref": "#/components/schemas/site"
          },
          "date": {
            "$ref": "#/components/schemas/date"
          },
          "reason": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Abattoir Kill"
              }
            },
            "required": [
              "name"
            ]
          },
          "receivedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/date"
              },
              {
                "readOnly": true
              }
            ]
          },
          "site": {
            "$ref": "#/components/schemas/site"
          },
          "tseTestRequiredFlag": {
            "type": "boolean"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/datetime"
          },
          "updatedDateTime": {
            "$ref": "#/components/schemas/datetime"
          }
        }
      },
      "AnimalBirthingHistory": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "identifier": {
              "type": "string",
              "readOnly": true,
              "example": "UK654321123456"
            },
            "date": {
              "$ref": "#/components/schemas/date"
            },
            "sex": {
              "$ref": "#/components/schemas/sex"
            },
            "birthSite": {
              "$ref": "#/components/schemas/site"
            }
          }
        }
      },
      "Assurance": {
        "type": "object",
        "properties": {
          "currentAssuredState": {
            "type": "string",
            "enum": [
              "assured",
              "expired",
              "revoked",
              "notAssured"
            ]
          },
          "assuranceHistory": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "schemeName": {
                  "type": "string",
                  "example": "DEFRA Vet Attestation"
                },
                "certificateNumber": {
                  "type": "string",
                  "example": "VAN-5544234-10/203/1005-11-24"
                },
                "certificationDate": {
                  "$ref": "#/components/schemas/date"
                },
                "expiryDate": {
                  "$ref": "#/components/schemas/date"
                },
                "revocationDate": {
                  "$ref": "#/components/schemas/date"
                },
                "veterinarianName": {
                  "type": "string",
                  "example": "Dr James Herriot"
                },
                "rcvsMembershipNumber": {
                  "type": "string",
                  "example": 5544234
                },
                "vetPracticeName": {
                  "type": "string",
                  "example": "Hunshelf Vets Ltd"
                },
                "assuredState": {
                  "type": "string",
                  "enum": [
                    "assured",
                    "expired",
                    "revoked"
                  ]
                }
              }
            }
          }
        }
      },
      "Animal": {
        "type": "object",
        "properties": {
          "animal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/animal"
              },
              {
                "type": "object",
                "properties": {
                  "genotype": {
                    "type": "string",
                    "example": "QQQ/QRR",
                    "nullable": true
                  },
                  "originalIdentifier": {
                    "type": "string",
                    "example": "USA005516557866",
                    "nullable": true
                  },
                  "productionType": {
                    "$ref": "#/components/schemas/productionType"
                  },
                  "state": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/animalState"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            ],
            "required": [
              "species",
              "sex"
            ]
          },
          "breed": {
            "$ref": "#/components/schemas/breed"
          },
          "currentSite": {
            "allOf": [
              {
                "$ref": "#/components/schemas/site"
              },
              {
                "readOnly": true
              }
            ]
          },
          "importParents": {
            "type": "object",
            "properties": {
              "sire": {
                "$ref": "#/components/schemas/ParentAnimal"
              },
              "geneticDam": {
                "$ref": "#/components/schemas/ParentAnimal"
              },
              "birthDam": {
                "description": "The animal giving birth to the animal in question. If the animal is a surrogate mother, there will be a genetic dam.",
                "$ref": "#/components/schemas/ParentAnimal"
              }
            }
          },
          "birth": {
            "$ref": "#/components/schemas/animalBirth"
          },
          "death": {
            "$ref": "#/components/schemas/animalDeath",
            "nullable": true
          },
          "registration": {
            "type": "object",
            "properties": {
              "birthDam": {
                "description": "The animal giving birth to the animal in question. If the animal is a surrogate mother, there will be a genetic dam.",
                "$ref": "#/components/schemas/ParentAnimal"
              },
              "geneticDam": {
                "description": "The genetic dam if different from the birth dam.",
                "$ref": "#/components/schemas/ParentAnimal"
              },
              "sire": {
                "$ref": "#/components/schemas/ParentAnimal"
              },
              "site": {
                "$ref": "#/components/schemas/site"
              },
              "date": {
                "$ref": "#/components/schemas/date"
              },
              "category": {
                "type": "string",
                "enum": [
                  "birthRegistration",
                  "registration"
                ]
              },
              "identificationDate": {
                "$ref": "#/components/schemas/date"
              }
            },
            "required": [
              "site",
              "date",
              "category"
            ]
          },
          "homeSite": {
            "allOf": [
              {
                "$ref": "#/components/schemas/site"
              },
              {
                "readOnly": true
              }
            ]
          },
          "birthingHistory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AnimalBirthingHistory"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "createdDateTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/datetime"
              },
              {
                "readOnly": true
              }
            ]
          },
          "updatedDateTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/datetime"
              },
              {
                "readOnly": true
              }
            ]
          },
          "assurance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Assurance"
              }
            ],
            "nullable": true,
            "readOnly": true
          }
        },
        "required": [
          "animal",
          "registration"
        ]
      },
      "AnimalResponse": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "format": "string",
            "readOnly": true,
            "example": "UK543017404195"
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "format": "uri",
                "readOnly": true,
                "example": "/animals/UK543017404195"
              }
            }
          }
        }
      },
      "LostFound": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/uuid"
              },
              {
                "readOnly": true
              }
            ]
          },
          "identifier": {
            "type": "string",
            "format": "string",
            "nullable": false,
            "example": "UK654321123456"
          },
          "site": {
            "allOf": [
              {
                "$ref": "#/components/schemas/site"
              },
              {
                "readOnly": true
              }
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "found",
              "lost",
              "stolen"
            ]
          },
          "eventDate": {
            "$ref": "#/components/schemas/date"
          },
          "reportedDateTime": {
            "$ref": "#/components/schemas/datetime"
          },
          "crimeReferenceNumber": {
            "type": "string",
            "example": "54617/23"
          },
          "foundDead": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "identifier",
          "status",
          "eventDate"
        ]
      },
      "DeathReasonList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "deathReason": {
                  "type": "string",
                  "example": "Killed for human consumption"
                }
              }
            }
          }
        }
      },
      "BreedList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/breed"
            }
          }
        }
      },
      "GenotypeList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "genotype": {
                  "type": "string",
                  "example": "AA/Bb"
                }
              }
            }
          }
        }
      },
      "RequestStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Success",
            "readOnly": true
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/MovementResponse2"
          },
          {
            "$ref": "#/components/schemas/MovementResponse1"
          },
          {
            "$ref": "#/components/schemas/AnimalResponse"
          }
        ]
      }
    },
    "parameters": {
      "xPage": {
        "name": "page",
        "in": "query",
        "required": false,
        "allowEmptyValue": false,
        "schema": {
          "type": "integer"
        }
      },
      "xPageSize": {
        "name": "pageSize",
        "in": "query",
        "required": false,
        "allowEmptyValue": false,
        "schema": {
          "type": "integer"
        }
      },
      "xSort": {
        "name": "sort",
        "in": "query",
        "required": false,
        "allowEmptyValue": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ]
        }
      },
      "xCorrelationId": {
        "in": "header",
        "name": "LI-Correlation-Id",
        "schema": {
          "allOf": [
            {
              "$ref": "#/components/schemas/uuid"
            },
            {
              "example": "1889185f-adb9-46aa-9035-1a752e9c3833"
            }
          ]
        }
      },
      "xRequestMode": {
        "in": "header",
        "name": "LI-Request-Mode",
        "schema": {
          "type": "string",
          "enum": [
            "sync",
            "async"
          ]
        },
        "description": "If no value supplied, it'll default to 'sync'"
      }
    },
    "headers": {
      "xRequestId": {
        "schema": {
          "allOf": [
            {
              "$ref": "#/components/schemas/uuid"
            },
            {
              "example": "df44b048-aa6a-4b2f-8ae7-daad7d3f6dc4"
            }
          ]
        },
        "description": "Uniquely identfies an HTTP request."
      },
      "xCorrelationId": {
        "schema": {
          "allOf": [
            {
              "$ref": "#/components/schemas/uuid"
            },
            {
              "example": "3eb0c71f-d237-49c5-b2f9-17d4bc8ec870"
            }
          ]
        },
        "description": "Request correlation id, the id is generated by the server if not provided by the client."
      },
      "xRetryAfter": {
        "schema": {
          "type": "integer"
        },
        "description": "The number of seconds/minutes before you can call this endpoint again."
      }
    },
    "examples": {
      "forbidden": {
        "value": {
          "type": "https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.4",
          "title": "Forbidden",
          "detail": "The resource could not be returned as the requestor is not authorized",
          "status": 403
        }
      },
      "not-found": {
        "value": {
          "type": "https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.5",
          "title": "Not found",
          "detail": "The requested resource was not found",
          "status": 404
        }
      },
      "server-error": {
        "value": {
          "type": "https://datatracker.ietf.org/doc/html/rfc9110#section-15.6.1",
          "title": "Server Error",
          "detail": "The server encountered an unexpected error",
          "status": 500
        }
      },
      "service-unavailable": {
        "value": {
          "type": "https://datatracker.ietf.org/doc/html/rfc9110#section-15.6.4",
          "title": "Service Unavailable",
          "detail": "The service is currently unavailable",
          "status": 503
        }
      },
      "validation-error": {
        "description": "Representation of a 400 Bad Request response where the request does not meet the validation rules.",
        "value": {
          "type": "https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.1",
          "status": 400,
          "title": "Validation Error",
          "detail": "The request is invalid.",
          "errors": [
            {
              "detail": "Birth site not known to LIS",
              "code": "V038"
            },
            {
              "detail": "The genetic or surrogate dam is not the same species as the animal being registered",
              "code": "V006"
            }
          ]
        }
      },
      "invalid-request-schema": {
        "description": "Representation of a 400 Bad Request response where the request has failed schema validation.",
        "value": {
          "type": "https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.1",
          "status": 400,
          "title": "Request Schema Error",
          "detail": "The request failed schema validation.",
          "errors": [
            {
              "detail": "The request is missing the required query parameter {siteId}",
              "code": "S002",
              "source": "siteId"
            },
            {
              "detail": "The format of the request body property {birthDate} is invalid",
              "code": "S008",
              "source": "#/birth/birthDate",
              "value": "2024-11/01"
            }
          ]
        }
      }
    }
  }
}